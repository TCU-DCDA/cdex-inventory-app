import { useState } from 'react';
import { Search, Calendar, User, BookOpen, Camera, Mic, Monitor, CheckCircle, XCircle } from 'lucide-react';

const InventoryApp = () => {
  // Dummy equipment data
  const [equipment, setEquipment] = useState([
    // Video Cameras
    { id: 1, name: 'Canon EOS R5', category: 'Video Camera - Professional', serialNumber: 'CR5001', available: true },
    { id: 2, name: 'Canon EOS R5', category: 'Video Camera - Professional', serialNumber: 'CR5002', available: false },
    { id: 3, name: 'Sony FX3', category: 'Video Camera - Professional', serialNumber: 'SF3001', available: true },
    { id: 4, name: 'Canon EOS R6', category: 'Video Camera - Standard', serialNumber: 'CR6001', available: true },
    { id: 5, name: 'Canon EOS R6', category: 'Video Camera - Standard', serialNumber: 'CR6002', available: true },
    { id: 6, name: 'Sony A7 III', category: 'Video Camera - Standard', serialNumber: 'SA7001', available: false },
    
    // DSLR Cameras
    { id: 7, name: 'Canon 5D Mark IV', category: 'DSLR Camera', serialNumber: '5D001', available: true },
    { id: 8, name: 'Canon 5D Mark IV', category: 'DSLR Camera', serialNumber: '5D002', available: true },
    { id: 9, name: 'Nikon D850', category: 'DSLR Camera', serialNumber: 'ND001', available: false },
    
    // Yeti Microphones
    { id: 10, name: 'Blue Yeti', category: 'Yeti Microphone', serialNumber: 'BY001', available: true },
    { id: 11, name: 'Blue Yeti', category: 'Yeti Microphone', serialNumber: 'BY002', available: true },
    { id: 12, name: 'Blue Yeti', category: 'Yeti Microphone', serialNumber: 'BY003', available: false },
    { id: 13, name: 'Blue Yeti', category: 'Yeti Microphone', serialNumber: 'BY004', available: true },
    
    // PC Laptops
    { id: 14, name: 'Dell XPS 15', category: 'PC Laptop', serialNumber: 'DX001', available: true },
    { id: 15, name: 'Dell XPS 15', category: 'PC Laptop', serialNumber: 'DX002', available: false },
    { id: 16, name: 'HP Spectre x360', category: 'PC Laptop', serialNumber: 'HS001', available: true },
    { id: 17, name: 'HP Spectre x360', category: 'PC Laptop', serialNumber: 'HS002', available: true },
    { id: 18, name: 'Lenovo ThinkPad X1', category: 'PC Laptop', serialNumber: 'LT001', available: true },
    
    // Mac Laptops
    ...Array.from({length: 15}, (_, i) => ({
      id: 19 + i,
      name: 'MacBook Pro 16"',
      category: 'Mac Laptop',
      serialNumber: `MBP${String(i + 1).padStart(3, '0')}`,
      available: i % 4 !== 0 // Make some unavailable
    }))
  ]);

  // Dummy checkout data
  const [checkouts, setCheckouts] = useState([
    {
      id: 1,
      studentName: 'Sarah Johnson',
      studentId: 'SJ12345',
      studentMajor: 'Film Production',
      facultySponsor: 'Dr. Smith',
      checkoutDate: '2024-06-10',
      returnDate: '2024-06-17',
      equipmentId: 2,
      equipmentName: 'Canon EOS R5',
      serialNumber: 'CR5002',
      returned: false
    },
    {
      id: 2,
      studentName: 'Mike Chen',
      studentId: 'MC67890',
      studentMajor: 'Journalism',
      facultySponsor: 'Prof. Johnson',
      checkoutDate: '2024-06-08',
      returnDate: '2024-06-15',
      equipmentId: 6,
      equipmentName: 'Sony A7 III',
      serialNumber: 'SA7001',
      returned: false
    }
  ]);

  const [activeTab, setActiveTab] = useState('checkout');
  const [studentName, setStudentName] = useState('');
  const [studentId, setStudentId] = useState('');
  const [studentMajor, setStudentMajor] = useState('');
  const [facultySponsor, setFacultySponsor] = useState('');
  const [selectedEquipment, setSelectedEquipment] = useState('');
  const [searchTerm, setSearchTerm] = useState('');

  const categories = ['Video Camera - Professional', 'Video Camera - Standard', 'DSLR Camera', 'Yeti Microphone', 'PC Laptop', 'Mac Laptop'];

  const getIcon = (category: string) => {
    switch (category) {
      case 'Video Camera - Professional':
      case 'Video Camera - Standard':
        return <Camera className="w-5 h-5" />;
      case 'DSLR Camera':
        return <Camera className="w-5 h-5" />;
      case 'Yeti Microphone':
        return <Mic className="w-5 h-5" />;
      case 'PC Laptop':
      case 'Mac Laptop':
        return <Monitor className="w-5 h-5" />;
      default:
        return <Monitor className="w-5 h-5" />;
    }
  };

  const availableEquipment = equipment.filter(item => item.available);
  const activeCheckouts = checkouts.filter(checkout => !checkout.returned);
  const filteredCheckouts = activeCheckouts.filter(checkout =>
    checkout.studentName.toLowerCase().includes(searchTerm.toLowerCase()) ||
    checkout.equipmentName.toLowerCase().includes(searchTerm.toLowerCase()) ||
    checkout.serialNumber.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleCheckout = () => {
    if (!studentName || !studentId || !studentMajor || !facultySponsor || !selectedEquipment) {
      alert('Please fill in all fields');
      return;
    }

    const equipmentItem = equipment.find(item => item.id === parseInt(selectedEquipment));
    if (!equipmentItem || !equipmentItem.available) {
      alert('Selected equipment is not available');
      return;
    }

    const newCheckout = {
      id: checkouts.length + 1,
      studentName,
      studentId,
      studentMajor,
      facultySponsor,
      checkoutDate: new Date().toISOString().split('T')[0],
      returnDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      equipmentId: equipmentItem.id,
      equipmentName: equipmentItem.name,
      serialNumber: equipmentItem.serialNumber,
      returned: false
    };

    setCheckouts([...checkouts, newCheckout]);
    
    // Update equipment availability
    setEquipment(equipment.map(item => 
      item.id === parseInt(selectedEquipment) ? { ...item, available: false } : item
    ));

    // Reset form
    setStudentName('');
    setStudentId('');
    setStudentMajor('');
    setFacultySponsor('');
    setSelectedEquipment('');
    
    alert('Equipment checked out successfully!');
  };

  const handleCheckin = (checkoutId: number) => {
    setCheckouts(checkouts.map(checkout => 
      checkout.id === checkoutId ? { ...checkout, returned: true } : checkout
    ));
    
    // Make equipment available again
    const checkout = checkouts.find(c => c.id === checkoutId);
    if (checkout) {
      setEquipment(equipment.map(item => 
        item.id === checkout.equipmentId ? { ...item, available: true } : item
      ));
    }
    
    alert('Equipment checked in successfully!');
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="bg-purple-700 text-white p-8 rounded-t-2xl">
          <h1 className="text-3xl font-bold mb-2">
            CDEx Inventory Management
          </h1>
          <p className="text-purple-100">Center for Digital Expression - Texas Christian University</p>
        </div>

        {/* Tab Navigation */}
        <div className="bg-white border-b border-gray-200 px-8">
          <div className="flex space-x-0">
            <button
              onClick={() => setActiveTab('checkout')}
              className={`px-6 py-4 font-medium border-b-2 transition-colors ${
                activeTab === 'checkout' 
                  ? 'text-purple-600 border-purple-600' 
                  : 'text-gray-500 border-transparent hover:text-gray-700'
              }`}
            >
              Check Out Equipment
            </button>
            <button
              onClick={() => setActiveTab('checkin')}
              className={`px-6 py-4 font-medium border-b-2 transition-colors ${
                activeTab === 'checkin' 
                  ? 'text-purple-600 border-purple-600' 
                  : 'text-gray-500 border-transparent hover:text-gray-700'
              }`}
            >
              Check In Equipment
            </button>
            <button
              onClick={() => setActiveTab('inventory')}
              className={`px-6 py-4 font-medium border-b-2 transition-colors ${
                activeTab === 'inventory' 
                  ? 'text-purple-600 border-purple-600' 
                  : 'text-gray-500 border-transparent hover:text-gray-700'
              }`}
            >
              View Inventory
            </button>
          </div>
        </div>

        {/* Content Area */}
        <div className="bg-white p-8 rounded-b-2xl shadow-lg">
          {/* Checkout Tab */}
          {activeTab === 'checkout' && (
            <div className="grid md:grid-cols-2 gap-8">
              {/* Checkout Form */}
              <div>
                <h2 className="text-2xl font-bold mb-6 text-gray-900">
                  Check Out Equipment
                </h2>
                <div className="space-y-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2 flex items-center">
                      <User className="w-4 h-4 mr-2" />
                      Student Name
                    </label>
                    <input
                      type="text"
                      value={studentName}
                      onChange={(e) => setStudentName(e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="Enter student name"
                      required
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Student ID
                    </label>
                    <input
                      type="text"
                      value={studentId}
                      onChange={(e) => setStudentId(e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="Enter student ID"
                      required
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2 flex items-center">
                      <BookOpen className="w-4 h-4 mr-2" />
                      Student Major
                    </label>
                    <input
                      type="text"
                      value={studentMajor}
                      onChange={(e) => setStudentMajor(e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="Enter student major"
                      required
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Sponsoring Faculty Member
                    </label>
                    <input
                      type="text"
                      value={facultySponsor}
                      onChange={(e) => setFacultySponsor(e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="Enter faculty sponsor"
                      required
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Select Equipment
                    </label>
                    <select
                      value={selectedEquipment}
                      onChange={(e) => setSelectedEquipment(e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      required
                    >
                      <option value="">Choose equipment...</option>
                      {categories.map(category => (
                        <optgroup key={category} label={category}>
                          {availableEquipment
                            .filter(item => item.category === category)
                            .map(item => (
                              <option key={item.id} value={item.id}>
                                {item.name} - {item.serialNumber}
                              </option>
                            ))
                          }
                        </optgroup>
                      ))}
                    </select>
                  </div>

                  <button
                    type="button"
                    onClick={handleCheckout}
                    className="w-full bg-purple-700 text-white py-4 px-6 rounded-lg font-semibold hover:bg-purple-800 transition-colors"
                  >
                    Check Out Equipment
                  </button>
                </div>
              </div>

              {/* Equipment Availability */}
              <div>
                <h2 className="text-2xl font-bold mb-6 text-gray-900">
                  Equipment Availability
                </h2>
                <div className="space-y-4">
                  {categories.map(category => {
                    const categoryItems = equipment.filter(item => item.category === category);
                    const availableCount = categoryItems.filter(item => item.available).length;
                    const totalCount = categoryItems.length;
                    
                    return (
                      <div key={category} className="bg-gray-50 p-4 rounded-lg">
                        <div className="flex justify-between items-center">
                          <div className="flex items-center">
                            <div className="mr-3 text-purple-600">
                              {getIcon(category)}
                            </div>
                            <span className="font-medium text-gray-900">{category}</span>
                          </div>
                          <div className="text-right">
                            <div className="font-bold">
                              <span className={availableCount > 0 ? 'text-green-600' : 'text-red-500'}>
                                {availableCount}
                              </span>
                              <span className="text-gray-400"> / {totalCount}</span>
                            </div>
                            <div className="text-xs text-gray-500">available</div>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>
          )}

          {/* Check In Tab */}
          {activeTab === 'checkin' && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold text-gray-900">
                  Active Checkouts
                </h2>
                <div className="relative">
                  <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                  <input
                    type="text"
                    placeholder="Search checkouts..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-12 pr-4 py-3 w-80 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  />
                </div>
              </div>

              {filteredCheckouts.length === 0 ? (
                <div className="text-center py-12">
                  <CheckCircle className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                  <p className="text-gray-500 text-lg">No active checkouts found</p>
                </div>
              ) : (
                <div className="grid gap-4">
                  {filteredCheckouts.map(checkout => (
                    <div key={checkout.id} className="bg-white border border-gray-200 rounded-lg p-6 shadow-sm">
                      <div className="flex justify-between items-start">
                        <div className="flex-1">
                          <h3 className="font-semibold text-lg text-gray-900 mb-2">
                            {checkout.studentName}
                          </h3>
                          <div className="space-y-1 text-sm text-gray-600">
                            <p><span className="font-medium">Student ID:</span> {checkout.studentId}</p>
                            <p><span className="font-medium">Major:</span> {checkout.studentMajor}</p>
                            <p><span className="font-medium">Faculty Sponsor:</span> {checkout.facultySponsor}</p>
                            <p><span className="font-medium">Equipment:</span> {checkout.equipmentName} - {checkout.serialNumber}</p>
                            <p><span className="font-medium">Checkout Date:</span> {checkout.checkoutDate}</p>
                            <p><span className="font-medium">Return Date:</span> {checkout.returnDate}</p>
                          </div>
                        </div>
                        <button
                          onClick={() => handleCheckin(checkout.id)}
                          className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors font-medium"
                        >
                          Check In
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {/* Inventory Tab */}
          {activeTab === 'inventory' && (
            <div className="space-y-6">
              <h2 className="text-2xl font-bold text-gray-900">Equipment Inventory</h2>
              
              {categories.map(category => {
                const categoryItems = equipment.filter(item => item.category === category);
                if (categoryItems.length === 0) return null;

                return (
                  <div key={category} className="bg-white border border-gray-200 rounded-lg p-6">
                    <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                      <div className="mr-3 text-purple-600">
                        {getIcon(category)}
                      </div>
                      {category}
                    </h3>
                    <div className="grid gap-2">
                      {categoryItems.map(item => (
                        <div key={item.id} className="flex justify-between items-center py-2 px-4 bg-gray-50 rounded">
                          <div>
                            <span className="font-medium text-gray-900">{item.name}</span>
                            <span className="text-gray-500 ml-2">({item.serialNumber})</span>
                          </div>
                          <div className="flex items-center">
                            {item.available ? (
                              <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                <CheckCircle className="w-3 h-3 mr-1" />
                                Available
                              </span>
                            ) : (
                              <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                <XCircle className="w-3 h-3 mr-1" />
                                Checked Out
                              </span>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default InventoryApp;
      equipmentId: 2,
      equipmentName: 'Canon EOS R5',
      serialNumber: 'CR5002',
      returned: false
    },
    {
      id: 2,
      studentName: 'Mike Chen',
      studentId: 'MC67890',
      studentMajor: 'Digital Media',
      facultySponsor: 'Prof. Williams',
      checkoutDate: '2024-06-08',
      equipmentId: 6,
      equipmentName: 'Sony A7 III',
      serialNumber: 'SA7001',
      returned: false
    },
    {
      id: 3,
      studentName: 'Emma Davis',
      studentId: 'ED54321',
      studentMajor: 'Journalism',
      facultySponsor: 'Dr. Brown',
      checkoutDate: '2024-06-09',
      equipmentId: 9,
      equipmentName: 'Nikon D850',
      serialNumber: 'ND001',
      returned: false
    },
    {
      id: 4,
      studentName: 'Alex Rodriguez',
      studentId: 'AR98765',
      studentMajor: 'Communications',
      facultySponsor: 'Prof. Taylor',
      checkoutDate: '2024-06-05',
      equipmentId: 12,
      equipmentName: 'Blue Yeti',
      serialNumber: 'BY003',
      returned: false
    },
    {
      id: 5,
      studentName: 'Jordan Kim',
      studentId: 'JK11111',
      studentMajor: 'Computer Science',
      facultySponsor: 'Dr. Wilson',
      checkoutDate: '2024-06-07',
      equipmentId: 15,
      equipmentName: 'Dell XPS 15',
      serialNumber: 'DX002',
      returned: false
    }
  ]);

  const [activeTab, setActiveTab] = useState('checkout');
  const [searchTerm, setSearchTerm] = useState('');
  
  // Form states
  const [studentName, setStudentName] = useState('');
  const [studentId, setStudentId] = useState('');
  const [studentMajor, setStudentMajor] = useState('');
  const [facultySponsor, setFacultySponsor] = useState('');
  const [selectedEquipment, setSelectedEquipment] = useState('');

  const categories = ['Video Camera - Professional', 'Video Camera - Standard', 'DSLR Camera', 'Yeti Microphone', 'PC Laptop', 'Mac Laptop'];

  const getIcon = (category: string) => {
    if (category.includes('Video Camera') || category.includes('DSLR')) return <Camera className="w-4 h-4" />;
    if (category.includes('Microphone')) return <Mic className="w-4 h-4" />;
    if (category.includes('Laptop')) return <Monitor className="w-4 h-4" />;
    return <Camera className="w-4 h-4" />;
  };

  const availableEquipment = equipment.filter(item => item.available);

  const activeCheckouts = checkouts.filter(checkout => !checkout.returned);
  const filteredCheckouts = activeCheckouts.filter(checkout =>
    checkout.studentName.toLowerCase().includes(searchTerm.toLowerCase()) ||
    checkout.studentId.toLowerCase().includes(searchTerm.toLowerCase()) ||
    checkout.equipmentName.toLowerCase().includes(searchTerm.toLowerCase()) ||
    checkout.serialNumber.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleCheckout = () => {
    if (!selectedEquipment || !studentName || !studentId || !studentMajor || !facultySponsor) {
      alert('Please fill in all fields');
      return;
    }

    const equipmentItem = equipment.find(item => item.id === parseInt(selectedEquipment));
    if (!equipmentItem) return;

    const newCheckout = {
      id: checkouts.length + 1,
      studentName,
      studentId,
      studentMajor,
      facultySponsor,
      checkoutDate: new Date().toISOString().split('T')[0],
      equipmentId: equipmentItem.id,
      equipmentName: equipmentItem.name,
      serialNumber: equipmentItem.serialNumber,
      returned: false
    };

    setCheckouts([...checkouts, newCheckout]);
    
    // Update equipment availability - Fixed the bug
    setEquipment(equipment.map(item => 
      item.id === parseInt(selectedEquipment) ? { ...item, available: false } : item
    ));

    // Reset form
    setStudentName('');
    setStudentId('');
    setStudentMajor('');
    setFacultySponsor('');
    setSelectedEquipment('');
    
    alert('Equipment checked out successfully!');
  };

  const handleCheckin = (checkoutId: number) => {
    setCheckouts(checkouts.map(checkout => 
      checkout.id === checkoutId ? { ...checkout, returned: true } : checkout
    ));
    
    // Make equipment available again - Fixed the bug
    const checkout = checkouts.find(c => c.id === checkoutId);
    if (checkout) {
      setEquipment(equipment.map(item => 
        item.id === checkout.equipmentId ? { ...item, available: true } : item
      ));
    }
    
    alert('Equipment checked in successfully!');
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="bg-purple-700 text-white p-8 rounded-t-2xl">
          <h1 className="text-3xl font-bold mb-2">
            CDEx Inventory Management
          </h1>
          <p className="text-purple-100">Center for Digital Expression - Texas Christian University</p>
        </div>

        {/* Tab Navigation */}
        <div className="bg-white border-b border-gray-200 px-8">
          <div className="flex space-x-0">
            <button
              onClick={() => setActiveTab('checkout')}
              className={`px-6 py-4 font-medium border-b-2 transition-colors ${
                activeTab === 'checkout' 
                  ? 'text-purple-600 border-purple-600' 
                  : 'text-gray-500 border-transparent hover:text-gray-700'
              }`}
            >
              Check Out Equipment
            </button>
            <button
              onClick={() => setActiveTab('checkin')}
              className={`px-6 py-4 font-medium border-b-2 transition-colors ${
                activeTab === 'checkin' 
                  ? 'text-purple-600 border-purple-600' 
                  : 'text-gray-500 border-transparent hover:text-gray-700'
              }`}
            >
              Check In Equipment
            </button>
            <button
              onClick={() => setActiveTab('inventory')}
              className={`px-6 py-4 font-medium border-b-2 transition-colors ${
                activeTab === 'inventory' 
                  ? 'text-purple-600 border-purple-600' 
                  : 'text-gray-500 border-transparent hover:text-gray-700'
              }`}
            >
              View Inventory
            </button>
          </div>
        </div>

        {/* Content Area */}
        <div className="bg-white p-8 rounded-b-2xl shadow-lg">
          {/* Checkout Tab */}
          {activeTab === 'checkout' && (
            <div className="grid md:grid-cols-2 gap-8">
              {/* Checkout Form */}
              <div>
                <h2 className="text-2xl font-bold mb-6 text-gray-900">
                  Check Out Equipment
                </h2>
                <div className="space-y-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2 flex items-center">
                      <User className="w-4 h-4 mr-2" />
                      Student Name
                    </label>
                    <input
                      type="text"
                      value={studentName}
                      onChange={(e) => setStudentName(e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="Enter student name"
                      required
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Student ID
                    </label>
                    <input
                      type="text"
                      value={studentId}
                      onChange={(e) => setStudentId(e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="Enter student ID"
                      required
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2 flex items-center">
                      <BookOpen className="w-4 h-4 mr-2" />
                      Student Major
                    </label>
                    <input
                      type="text"
                      value={studentMajor}
                      onChange={(e) => setStudentMajor(e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="Enter student major"
                      required
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Sponsoring Faculty Member
                    </label>
                    <input
                      type="text"
                      value={facultySponsor}
                      onChange={(e) => setFacultySponsor(e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="Enter faculty sponsor"
                      required
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Select Equipment
                    </label>
              <div className="flex items-center">
                <Monitor className="w-5 h-5 mr-2" />
                <span className="text-sm">Equipment Tracking</span>
              </div>
              <div className="flex items-center">
                <User className="w-5 h-5 mr-2" />
                <span className="text-sm">Student Management</span>
              </div>
            </div>
          </div>
          <div className="absolute top-4 right-4 opacity-20">
            <Camera className="w-16 h-16" />
          </div>
        </div>

      {/* Tab Navigation */}
      <div className="flex space-x-2 mb-8 p-2 rounded-xl shadow-xl" style={{ 
        background: 'rgba(255, 255, 255, 0.9)', 
        backdropFilter: 'blur(10px)',
        border: '2px solid rgba(77, 25, 121, 0.2)'
      }}>
        <button
          onClick={() => setActiveTab('checkout')}
          className="px-6 py-3 rounded-lg transition-all duration-300 font-medium flex items-center space-x-2"
          style={{
            background: activeTab === 'checkout' 
              ? 'linear-gradient(135deg, #4d1979 0%, #5d2cdc 100%)' 
              : 'transparent',
            color: activeTab === 'checkout' ? '#ffffff' : '#4d1979',
            boxShadow: activeTab === 'checkout' ? '0 10px 25px rgba(77, 25, 121, 0.3)' : 'none',
            transform: activeTab === 'checkout' ? 'scale(1.05)' : 'scale(1)',
            border: activeTab === 'checkout' ? 'none' : '1px solid #4d1979'
          }}
        >
          <User className="w-4 h-4" />
          <span>Check Out Equipment</span>
        </button>
        <button
          onClick={() => setActiveTab('checkin')}
          className="px-6 py-3 rounded-lg transition-all duration-300 font-medium flex items-center space-x-2"
          style={{
            background: activeTab === 'checkin' 
              ? 'linear-gradient(135deg, #4d1979 0%, #5d2cdc 100%)' 
              : 'transparent',
            color: activeTab === 'checkin' ? '#ffffff' : '#4d1979',
            boxShadow: activeTab === 'checkin' ? '0 10px 25px rgba(77, 25, 121, 0.3)' : 'none',
            transform: activeTab === 'checkin' ? 'scale(1.05)' : 'scale(1)',
            border: activeTab === 'checkin' ? 'none' : '1px solid #4d1979'
          }}
        >
          <CheckCircle className="w-4 h-4" />
          <span>Check In Equipment</span>
        </button>
        <button
          onClick={() => setActiveTab('inventory')}
          className="px-6 py-3 rounded-lg transition-all duration-300 font-medium flex items-center space-x-2"
          style={{
            background: activeTab === 'inventory' 
              ? 'linear-gradient(135deg, #4d1979 0%, #5d2cdc 100%)' 
              : 'transparent',
            color: activeTab === 'inventory' ? '#ffffff' : '#4d1979',
            boxShadow: activeTab === 'inventory' ? '0 10px 25px rgba(77, 25, 121, 0.3)' : 'none',
            transform: activeTab === 'inventory' ? 'scale(1.05)' : 'scale(1)',
            border: activeTab === 'inventory' ? 'none' : '1px solid #4d1979'
          }}
        >
          <Monitor className="w-4 h-4" />
          <span>View Inventory</span>
        </button>
      </div>

      {/* Checkout Tab */}
      {activeTab === 'checkout' && (
        <div className="grid md:grid-cols-2 gap-8">
          {/* Checkout Form */}
          <div className="bg-white/80 backdrop-blur-sm p-8 rounded-2xl shadow-xl border border-tcu-200/30">
            <h2 className="text-2xl font-bold mb-6 text-tcu-900 flex items-center">
              <User className="w-6 h-6 mr-3 text-tcu-primary" />
              Check Out Equipment
            </h2>
            <div className="space-y-6">
              <div className="group">
                <label className="block text-sm font-semibold text-tcu-800 mb-2 flex items-center">
                  <User className="inline w-4 h-4 mr-2 text-tcu-primary" />
                  Student Name
                </label>
                <input
                  type="text"
                  value={studentName}
                  onChange={(e) => setStudentName(e.target.value)}
                  className="w-full px-4 py-3 border border-tcu-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-tcu-primary focus:border-transparent transition-all duration-300 bg-white/90 backdrop-blur-sm group-hover:shadow-md"
                  placeholder="Enter student name"
                  required
                />
              </div>

              <div className="group">
                <label className="block text-sm font-semibold text-tcu-800 mb-2">
                  Student ID
                </label>
                <input
                  type="text"
                  value={studentId}
                  onChange={(e) => setStudentId(e.target.value)}
                  className="w-full px-4 py-3 border border-tcu-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-tcu-primary focus:border-transparent transition-all duration-300 bg-white/90 backdrop-blur-sm group-hover:shadow-md"
                  placeholder="Enter student ID"
                  required
                />
              </div>

              <div className="group">
                <label className="block text-sm font-semibold text-tcu-800 mb-2 flex items-center">
                  <BookOpen className="inline w-4 h-4 mr-2 text-tcu-primary" />
                  Student Major
                </label>
                <input
                  type="text"
                  value={studentMajor}
                  onChange={(e) => setStudentMajor(e.target.value)}
                  className="w-full px-4 py-3 border border-tcu-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-tcu-primary focus:border-transparent transition-all duration-300 bg-white/90 backdrop-blur-sm group-hover:shadow-md"
                  placeholder="Enter student major"
                  required
                />
              </div>

              <div className="group">
                <label className="block text-sm font-semibold text-tcu-800 mb-2">
                  Sponsoring Faculty Member
                </label>
                <input
                  type="text"
                  value={facultySponsor}
                  onChange={(e) => setFacultySponsor(e.target.value)}
                  className="w-full px-4 py-3 border border-tcu-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-tcu-primary focus:border-transparent transition-all duration-300 bg-white/90 backdrop-blur-sm group-hover:shadow-md"
                  placeholder="Enter faculty sponsor"
                  required
                />
              </div>

              <div className="group">
                <label className="block text-sm font-semibold text-tcu-800 mb-2">
                  Select Equipment
                </label>
                <select
                  value={selectedEquipment}
                  onChange={(e) => setSelectedEquipment(e.target.value)}
                  className="w-full px-4 py-3 border border-tcu-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-tcu-primary focus:border-transparent transition-all duration-300 bg-white/90 backdrop-blur-sm group-hover:shadow-md"
                  required
                >
                  <option value="">Choose equipment...</option>
                  {categories.map(category => (
                    <optgroup key={category} label={category}>
                      {availableEquipment
                        .filter(item => item.category === category)
                        .map(item => (
                          <option key={item.id} value={item.id}>
                            {item.name} - {item.serialNumber}
                          </option>
                        ))
                      }
                    </optgroup>
                  ))}
                </select>
              </div>

              <button
                type="button"
                onClick={handleCheckout}
                className="w-full bg-gradient-to-r from-tcu-primary to-tcu-700 text-white py-4 px-6 rounded-xl transition-all duration-300 font-semibold shadow-lg hover:shadow-xl hover:from-tcu-800 hover:to-tcu-900 transform hover:scale-105 active:scale-95"
              >
                <CheckCircle className="inline w-5 h-5 mr-2" />
                Check Out Equipment
              </button>
            </div>
          </div>

          {/* Available Equipment Summary */}
          <div className="bg-white/80 backdrop-blur-sm p-8 rounded-2xl shadow-xl border border-tcu-200/30">
            <h2 className="text-2xl font-bold mb-6 text-tcu-900 flex items-center">
              <Monitor className="w-6 h-6 mr-3 text-tcu-primary" />
              Equipment Availability
            </h2>
            <div className="space-y-4">
              {categories.map(category => {
                const categoryItems = equipment.filter(item => item.category === category);
                const availableCount = categoryItems.filter(item => item.available).length;
                const totalCount = categoryItems.length;
                
                return (
                  <div key={category} className="group">
                    <div className="flex items-center justify-between p-4 bg-gradient-to-r from-white/90 to-tcu-50/90 rounded-xl border border-tcu-200/50 transition-all duration-300 hover:shadow-lg hover:scale-102">
                      <div className="flex items-center">
                        <div className="p-2 bg-tcu-100 rounded-lg mr-3 group-hover:bg-tcu-200 transition-colors duration-300">
                          {getIcon(category)}
                        </div>
                        <span className="font-semibold text-tcu-900">{category}</span>
                      </div>
                      <div className="text-right">
                        <div className="text-lg font-bold">
                          <span className={`${availableCount > 0 ? 'text-emerald-600' : 'text-red-500'}`}>
                            {availableCount}
                          </span>
                          <span className="text-tcu-400 text-sm font-normal"> / {totalCount}</span>
                        </div>
                        <div className="text-xs text-tcu-500 font-medium">available</div>
                      </div>
                    </div>
                    <div className="mt-2 bg-tcu-200 rounded-full h-2 overflow-hidden">
                      <div 
                        className={`h-full rounded-full transition-all duration-500 ${
                          availableCount > 0 ? 'bg-gradient-to-r from-emerald-400 to-emerald-500' : 'bg-gradient-to-r from-red-400 to-red-500'
                        }`}
                        style={{ width: `${(availableCount / totalCount) * 100}%` }}
                      ></div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      )}

      {/* Check In Tab */}
      {activeTab === 'checkin' && (
        <div className="space-y-6">
          <div className="flex justify-between items-center">
            <h2 className="text-2xl font-bold text-tcu-900 flex items-center">
              <CheckCircle className="w-6 h-6 mr-3 text-tcu-primary" />
              Active Checkouts
            </h2>
            <div className="relative">
              <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-tcu-400 w-5 h-5" />
              <input
                type="text"
                placeholder="Search checkouts..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-12 pr-4 py-3 w-80 border border-tcu-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-tcu-primary focus:border-transparent transition-all duration-300 bg-white/90 backdrop-blur-sm shadow-lg"
              />
            </div>
          </div>

          <div className="grid gap-6">
            {filteredCheckouts.map(checkout => (
              <div key={checkout.id} className="bg-white/80 backdrop-blur-sm border border-tcu-200/30 rounded-2xl p-6 shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-102">
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <div className="grid md:grid-cols-2 gap-6">
                      <div className="space-y-3">
                        <h3 className="font-bold text-xl text-tcu-900 flex items-center">
                          <User className="w-5 h-5 mr-2 text-tcu-primary" />
                          {checkout.studentName}
                        </h3>
                        <div className="space-y-2 text-tcu-700">
                          <p className="flex items-center">
                            <span className="font-semibold text-tcu-800 w-16">ID:</span>
                            <span className="bg-tcu-100 px-2 py-1 rounded-lg text-tcu-800 font-medium">{checkout.studentId}</span>
                          </p>
                          <p className="flex items-center">
                            <BookOpen className="w-4 h-4 mr-2 text-tcu-primary" />
                            <span className="font-semibold text-tcu-800 mr-2">Major:</span>
                            <span>{checkout.studentMajor}</span>
                          </p>
                          <p className="flex items-center">
                            <span className="font-semibold text-tcu-800 mr-2">Faculty:</span>
                            <span>{checkout.facultySponsor}</span>
                          </p>
                        </div>
                      </div>
                      <div className="space-y-3">
                        <div className="bg-gradient-to-r from-tcu-50 to-indigo-50 p-4 rounded-xl border border-tcu-200">
                          <p className="font-bold text-lg text-tcu-900 flex items-center">
                            {getIcon(checkout.equipmentName.includes('Camera') ? 'Camera' : checkout.equipmentName.includes('Yeti') ? 'Microphone' : 'Laptop')}
                            <span className="ml-2">{checkout.equipmentName}</span>
                          </p>
                          <p className="text-tcu-700 mt-1">
                            <span className="font-semibold">Serial:</span> 
                            <span className="bg-tcu-200 px-2 py-1 rounded ml-2 font-mono text-sm">{checkout.serialNumber}</span>
                          </p>
                          <p className="text-tcu-700 flex items-center mt-2">
                            <Calendar className="w-4 h-4 mr-2 text-tcu-primary" />
                            <span className="font-semibold mr-2">Checked out:</span>
                            <span className="bg-blue-100 px-2 py-1 rounded text-blue-800 font-medium">{checkout.checkoutDate}</span>
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                  <button
                    onClick={() => handleCheckin(checkout.id)}
                    className="ml-6 bg-gradient-to-r from-emerald-500 to-green-600 text-white px-6 py-3 rounded-xl transition-all duration-300 flex items-center font-semibold shadow-lg hover:shadow-xl hover:from-emerald-600 hover:to-green-700 transform hover:scale-105 active:scale-95"
                  >
                    <CheckCircle className="w-5 h-5 mr-2" />
                    Check In
                  </button>
                </div>
              </div>
            ))}
          </div>

          {filteredCheckouts.length === 0 && (
            <div className="text-center py-16">
              <div className="bg-white/80 backdrop-blur-sm rounded-2xl p-8 shadow-xl border border-tcu-200/30 inline-block">
                <CheckCircle className="w-16 h-16 text-tcu-300 mx-auto mb-4" />
                <p className="text-tcu-600 text-lg font-medium">
                  {searchTerm ? 'No checkouts match your search.' : 'No active checkouts.'}
                </p>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Inventory Tab */}
      {activeTab === 'inventory' && (
        <div>
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-xl font-semibold text-tcu-900">Equipment Inventory</h2>
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-tcu-400 w-4 h-4" />
              <input
                type="text"
                placeholder="Search equipment..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 pr-4 py-2 border border-tcu-300 rounded-md focus:outline-none focus:ring-2 focus:ring-tcu-primary focus:border-tcu-primary bg-white/90"
              />
            </div>
          </div>

          <div className="grid gap-6">
            {categories.map(category => {
              const categoryItems = equipment.filter(item => 
                item.category === category && 
                (item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                 item.serialNumber.toLowerCase().includes(searchTerm.toLowerCase()))
              );

              if (categoryItems.length === 0) return null;

              return (
                <div key={category} className="bg-white/90 border border-tcu-200 rounded-lg p-6 shadow-lg">
                  <h3 className="text-lg font-semibold mb-4 flex items-center text-tcu-900">
                    {getIcon(category)}
                    <span className="ml-2">{category}</span>
                  </h3>
                  <div className="grid gap-2">
                    {categoryItems.map(item => (
                      <div key={item.id} className="flex items-center justify-between p-3 bg-tcu-50/50 rounded border border-tcu-100 hover:bg-tcu-50 transition-colors">
                        <div>
                          <span className="font-medium text-tcu-900">{item.name}</span>
                          <span className="text-tcu-600 ml-2">({item.serialNumber})</span>
                        </div>
                        <div className="flex items-center">
                          {item.available ? (
                            <span className="flex items-center text-green-600 font-medium">
                              <CheckCircle className="w-4 h-4 mr-1" />
                              Available
                            </span>
                          ) : (
                            <span className="flex items-center text-red-600 font-medium">
                              <XCircle className="w-4 h-4 mr-1" />
                              Checked Out
                            </span>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      )}
      </div>
    </div>
  );
};

export default InventoryApp;
